import java.util.LinkedList;
import java.util.Queue;

class MyStack {

    Queue<Integer> main;
    Queue<Integer> aux;
    Queue<Integer> temp;
    int top;

    /**
     * Initialize your data structure here.
     */
    public MyStack() {
        main = new LinkedList<>();
        aux = new LinkedList<>();
        temp = new LinkedList<>();
    }

    /**
     * Push element x onto stack.
     */
    public void push(int x) {
        main.add(x);
        top = x;
    }

    /**
     * Removes the element on top of the stack and returns that element.
     */
    public int pop() {
        if (!this.empty()) {

            while (main.size() != 1) {
                top = main.poll();
                aux.add(top);
            }
            int ans = main.poll();
            temp = main;
            main = aux;
            aux = temp;
            return ans;
        } else {
            return -1;
        }
    }

    /**
     * Get the top element.
     */
    public int top() {
        if (!this.empty()) {
            return top;
        } else {
            return -1;
        }
    }

    /**
     * Returns whether the stack is empty.
     */
    public boolean empty() {
        if (main.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }



}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
